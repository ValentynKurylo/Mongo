1. Write a MongoDB query to display all the documents in the collection restaurants.

db.getCollection('r').find({})

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

db.getCollection('r').find({}, {
    restaurant_id: true,
    name: true,
    borough: true,
    cuisine: true 
    })


3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.

db.getCollection('r').find({}, {
    restaurant_id: true,
    name: true,
    borough: true,
    cuisine: true,
    _id: false
    })


4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.

db.getCollection('r').find({}, {
    restaurant_id: true,
    name: true,
    borough: true,
    address:{zipcode:true},
    _id: false
    })


5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.

db.getCollection('r').find({borough: 'Bronx'})


6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.

db.getCollection('r').find({borough: 'Bronx'}).limit(5)


7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

db.getCollection('r').find({borough: 'Bronx'}).limit(5).skip(5)

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.

db.getCollection('r').find({'grades.score':{$gt:20}})


9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

db.getCollection('r').find({'grades.score':{$gt:20, $lt: 100}})


10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168

db.getCollection('r').find({'address.coord.0':{ $lt: -95.754168}})

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

db.getCollection('r').find({cuisine: {$ne: "American "}, 'address.coord.0':{$lt: -65.754168}, 'grades.score':{$gt: 35}})


12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
    Note : Do this query without using $and operator.


13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

db.getCollection('r').find({cuisine: {$ne: "American "}, borough:{$ne: 'Brooklyn'}, 'grades.grade': 'A'}).sort({cuisine: 1})

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.

db.getCollection('r').find({ name: /^Wil/i},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })


15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.

db.getCollection('r').find({ name: /es$/i},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })


16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.

db.getCollection('r').find({ name: /.*Reg*/i},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })


17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.

db.getCollection('r').find({borough: 'Bronx', $or: [{cuisine: 'American'}, {cuisine: 'Chinese'}]})

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.

db.getCollection('r').find({$or:[{borough: 'Staten Island'}, {borough: 'Queens'}, {borough: 'Bronxor Brooklyn'}]},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })


19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.

db.getCollection('r').find({$or:[{borough: {$ne: 'Staten Island'}}, {borough: {$ne: 'Queens'}}, {borough: {$ne:'Bronxor Brooklyn'}}]},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })


20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.

db.getCollection('r').find({'grades.score':{$lte :10}},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })


21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

db.getCollection('r').find({$and:[{cuisine: {$ne:'American '}}, {cuisine: {$ne: 'Chinese'}}, {name: /^Wil/i}]},{
    restaurant_id: true,
    name: true,
    cuisine: true,
    borough: true,
    _id: false
    })

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..

db.getCollection('r').find({$and:[{"grades.grade" : "A"}, {"grades.score": 11}, {"grades.date": ISODate("2014-08-11T00:00:00Z")}]},{
    restaurant_id: true,
    name: true,
    grades: true,
    _id: false
    })

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".

db.getCollection('r').find({$and:[{"grades.grade.1" : "A"}, {"grades.score.1": 11}, {"grades.date": ISODate("2014-08-11T00:00:00Z")}]},{
    restaurant_id: true,
    name: true,
    grades: true,
    _id: false
    })

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..

db.getCollection('r').find({'address.coord.1': {$gt: 42, $lt: 52}},{
    restaurant_id: true,
    name: true,
    address: true,
    _id: false
    })

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

db.getCollection('r').find({}).sort({name: 1})

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

db.getCollection('r').find({}).sort({name: -1})

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.

db.getCollection('r').find({}).sort({cuisine: 1, borough: -1})

28. Write a MongoDB query to know whether all the addresses contains the street or not.

db.getCollection('r').find({"address.street": {$exists: true}})


29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.


30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.


31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.

db.getCollection('r').find({name: /.*mon*/i}, {
    restaurant_id: true,
    name: true,
    cuisine: true,
    'address.coord': true,
    _id: false})

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.

db.getCollection('r').find({name: /^Mad/i}, {
    restaurant_id: true,
    name: true,
    cuisine: true,
    'address.coord': true,
    _id: false})
